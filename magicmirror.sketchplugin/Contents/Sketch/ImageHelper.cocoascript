
var ImageHelper = {

	"getCGImage" : function(nsimage) {
		var size = nsimage.size();
   		var rect = CGRectMake(0, 0, size.width, size.height);
		var bitmapCtx = CGBitmapContextCreate(nil, 
												   size.width,  
												   size.height, 
												   8 /*bitsPerComponent*/, 
												   0 , 
												   [[NSColorSpace genericRGBColorSpace] CGColorSpace], 
												   kCGBitmapByteOrder32Host|kCGImageAlphaPremultipliedFirst);
		[NSGraphicsContext saveGraphicsState];
		[NSGraphicsContext setCurrentContext:[NSGraphicsContext graphicsContextWithGraphicsPort:bitmapCtx flipped:false]];
		[nsimage drawInRect:NSMakeRect(0,0, size.width, size.height) fromRect:NSZeroRect operation:NSCompositeCopy fraction:2.0];
		[NSGraphicsContext restoreGraphicsState];
		var imageRef = CGBitmapContextCreateImage(bitmapCtx);
		CGContextRelease(bitmapCtx);
		return imageRef
	},

	"getCIImageFromNSImage":function(nsimage) {
		var tiffData = [nsimage TIFFRepresentation];
		var bitmap = [NSBitmapImageRep imageRepWithData:tiffData];
		var ciImage = [[CIImage alloc] initWithBitmapImageRep:bitmap];
		return ciImage;
	},

	"getCIImage":function(cgimage) {
		var ciimage = [CIImage imageWithCGImage:cgimage];
		return ciimage;
	},
	
	"getNSImage":function(ciimage) {
    	var rep = [NSCIImageRep imageRepWithCIImage: ciimage];
        var image = [[NSImage alloc] initWithSize:ciimage.extent().size];
    	[image addRepresentation:rep];
		return image;
	},

	"getNSImageFromCGImage" : function(cgimage, size) {
		var image = [[NSImage alloc] initWithCGImage:cgimage size:size];
		return image
	},

	"perspectiveTransform": function (nsimage, topLeft, topRight, bottomLeft, bottomRight, size) {
		var cgimage = ImageHelper.getCGImage(nsimage)
		var ciimage = ImageHelper.getCIImage(cgimage)
    	var y = size.height;
    	var filter = [CIFilter filterWithName:"CIPerspectiveTransform"];
        [filter setValue:ciimage forKey:"inputImage"];
        [filter setValue:[CIVector vectorWithX:topLeft.x Y:y - topLeft.y] forKey:"inputTopLeft"];
        [filter setValue:[CIVector vectorWithX:topRight.x Y:y - topRight.y] forKey:"inputTopRight"];
        [filter setValue:[CIVector vectorWithX:bottomRight.x Y:y - bottomRight.y] forKey:"inputBottomRight"];
        [filter setValue:[CIVector vectorWithX:bottomLeft.x Y:y - bottomLeft.y] forKey:"inputBottomLeft"];
		var output = filter.outputImage() // CIImage
		// return ImageHelper.getNSImage(output)
		var ns = ImageHelper.getNSImage(output)
		var cg = ImageHelper.getCGImage(ns)
		return ImageHelper.getNSImageFromCGImage(cg, size)
	},

	"horizontalTransform" : function(nsimage) {
		var cgimage = ImageHelper.getCGImage(nsimage)
		var c = ImageHelper.getCIImage(cgimage)
		c = [c imageByApplyingTransform:CGAffineTransformTranslate(CGAffineTransformMakeScale(-1, 1), 0, c.extent().size.height)];
		return ImageHelper.getNSImage(c)
	},

	"resizeImage": function(nsimage, nssize) {
		var resized = [NSImage imageWithSize:nssize];
    	[resized lockFocus]
        var rect = NSMakeRect(0, 0, nssize.width, nssize.height)
        // var context = NSGraphicsContext.currentContext().graphicsPort()
		[nsimage drawInRect:rect];
    	[resized unlockFocus];
		return resized
	},

};
