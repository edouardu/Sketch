var BezierPathHelper = {

	"reverse" : function(nsbezierpath) {
		var point0 = nsbezierpath.pointAtIndex(0)
		var point1 = nsbezierpath.pointAtIndex(1)
		var point2 = nsbezierpath.pointAtIndex(2)
		var point3 = nsbezierpath.pointAtIndex(3)
		return this.fromPoints([point0, point3, point2, point1])
	},

	"fromPoints" : function(points) {
        var path = CGPathCreateMutable();
        if (points && points.length > 0) {
            var p = points[0];
            CGPathMoveToPoint(path, nil, p.x, p.y);
            for (var i = 1; i < points.length; i++) {
                p = points[i];
                CGPathAddLineToPoint(path, nil, p.x, p.y);
            }
        }
        CGPathCloseSubpath(path)
        var newPath = [NSBezierPath bezierPathWithCGPath:path]
		CGPathRelease(path)
        return newPath
	},
	
	"getQuad": function(bezierPath) {
		var quad;
		if (this.isClockwise(bezierPath)) {
			quad = {
				"tl" : bezierPath.pointAtIndex(0),
				"tr" : bezierPath.pointAtIndex(1),
				"br" : bezierPath.pointAtIndex(2),
				"bl" : bezierPath.pointAtIndex(3),
			}
		} else {
			quad = {
				"tl" : bezierPath.pointAtIndex(0),
				"tr" : bezierPath.pointAtIndex(3),
				"br" : bezierPath.pointAtIndex(2),
				"bl" : bezierPath.pointAtIndex(1),
			}
		}
		quad.size = bezierPath.bounds().size
		quad.scale = function(x, y){

			log("quad1: " + this.tr)
			var tl = this.tl
			var tr = this.tr
			var br = this.br
			var bl = this.bl
			this.tl = CGPointMake(tl.x * x, tl.y * y)
			this.tr = CGPointMake(tr.x * x, tr.y * y)
			this.br = CGPointMake(br.x * x, br.y * y)
			this.bl = CGPointMake(bl.x * x, bl.y * y)

			this.size = CGSizeMake(this.size.width * x, this.size.height * y)
			return this
		}
		return quad
	},

	"rotatePoints" : function(nsbezierpath) {
		return this.clockwisePoints(nsbezierpath)
	},

	"clockwisePoints" : function(nsbezierpath) {
		var point0 = nsbezierpath.pointAtIndex(0)
		var point1 = nsbezierpath.pointAtIndex(1)
		var point2 = nsbezierpath.pointAtIndex(2)
		var point3 = nsbezierpath.pointAtIndex(3)
		var points = [point3, point0, point1, point2]
		var newPath = this.fromPoints(points)
		return newPath
	},

	"antiClockwisePoints" : function(nsbezierpath) {
		var point0 = nsbezierpath.pointAtIndex(0)
		var point1 = nsbezierpath.pointAtIndex(1)
		var point2 = nsbezierpath.pointAtIndex(2)
		var point3 = nsbezierpath.pointAtIndex(3)
		var points = [point1, point2, point3, point0]
		var newPath = this.fromPoints(points)
		return newPath
	},

	"flipShiftX" : function(nsbezierpath) {
		if (this.isClockwise(nsbezierpath)) {
			var shifted = this.antiClockwisePoints(nsbezierpath)
			return this.flipX(shifted)
		} else {
			var shifted = this.clockwisePoints(nsbezierpath)
			return this.flipX(shifted)
		}
	},
	"flipX" : function(nsbezierpath) {
	    var bezierPath = nsbezierpath;
	    var transform = [NSAffineTransform transform];
	    [transform translateXBy:CGRectGetMidX(bezierPath.bounds()) yBy:0];
	    [transform scaleXBy:-1 yBy:1];
	    [transform translateXBy:-CGRectGetMidX(bezierPath.bounds()) yBy:0];
	    var flipped = [transform transformBezierPath:bezierPath];
	    return flipped;
	    // return bezierPath;
	},

    "flipHorizontally" : function(nsbezierpath) {
        var point0 = nsbezierpath.pointAtIndex(0)
        var point1 = nsbezierpath.pointAtIndex(1)
        var point2 = nsbezierpath.pointAtIndex(2)
        var point3 = nsbezierpath.pointAtIndex(3)
        var flipped0 = CGPointMake(point0.x, point1.y)
        var flipped1 = CGPointMake(point1.x, point0.y)
        var flipped2 = CGPointMake(point2.x, point3.y)
        var flipped3 = CGPointMake(point3.x, point2.y)
        var points = [flipped0, flipped1, flipped2, flipped3]
        var newPath = this.fromPoints(points)
        return newPath
    },

	"isClockwise" : function(nsbezierpath) {

		// http://stackoverflow.com/questions/1165647/how-to-determine-if-a-list-of-polygon-points-are-in-clockwise-order

		var pointSum = function (points) {
			var edgesLength = function(point1, point2) {
			    var x2 = point2.x
			    var x1 = point1.x
			    var y2 = point2.y
			    var y1 = point1.y
			    return (x2-x1) * (y2+y1)
			}

			var value = 0
			for (var i = 0; i < points.length; i++) {
			    var point1 = points[i]
			    var point2 = points[i + 1] || points[0]
			    value += edgesLength(point1, point2)
			}
			// positive = anti clockwise in OS X coordinates system
			return value
		}

		var point0 = nsbezierpath.pointAtIndex(0)
		var point1 = nsbezierpath.pointAtIndex(1)
		var point2 = nsbezierpath.pointAtIndex(2)
		var point3 = nsbezierpath.pointAtIndex(3)
		var points = [point0, point1, point2, point3]

		if (pointSum(points) > 0) {
			return false
		}
		return true

	}

}
