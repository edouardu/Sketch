
var MagicMirror = function(context) {

    var ctx = MagicMirror.context(context)
    var ui = MagicMirror.ui(context)
    var util = MagicMirror.util

    var persister = MagicMirror.persister()

    var actioner = {
        context : ctx,

        jumpToArtboard : function() {
            var context = this.context
            var run = function(selections, view, artboards, ui, util) {
                log("MagicMirror.jumpToArtboard()")
                if (util.empty(selections)) {
                    ui.show("Magic Mirror: No layer is selected to perform Jump To Artboard.")
                }

                var selection = selections[0] || {}
                var lookup = util.createLookup(artboards)
                var artboard = selection.matchingArtboard(lookup)
                if (artboard) {
                    view.zoomToArtboard(artboard)
                    ui.show("Magic Mirror: Jump To Artboard named \"" + artboard.name + "\"")
                }
            }

            run(context.selections() || [], context.view, context.artboards(), ui, util)
        },

        mirrorPage : function() {
            var context = this.context
            var run = function(artboards, layers, util, flattener) {
                log("MagicMirror.mirrorPage()")
                var lookup = util.createLookup(artboards)
                var artboardNames = {}
                var matchingLayersCount = 0
                var pageNames = {}
                each(layers, function(layer) {
                    var parent = layer.artboard
                    var artboard = layer.matchingArtboard(lookup)
                    if (artboard) {
                        matchingLayersCount++
                        artboardNames[artboard.name] = true
                        pageNames[artboard.pageName] = true
                        flattener.perspectiveTransform(artboard, layer)
                    }
                })
                var artboardsCount = Object.keys(artboardNames).length
                var pagesCount = Object.keys(pageNames).length
                var retinaEnabled = locker.isLicensed()
                ui.show("Magic Mirror: " + artboardsCount + " artboard(s) in " + pagesCount + " page(s) are mirrored to " + matchingLayersCount + " layer(s). Retina: (" + retinaEnabled + ")")
            }
            run(context.artboards(), context.layers(), util, createFlattener())
        },


        flipHorizontally : function(context) {
            var context = this.context
            var run = function(artboards, selections, ui, util, flattener) {
                log("MagicMirror.flipHorizontally()")

                if (util.empty(selections)) {
                    ui.show("Magic Mirror: Select one or more layers to perform Flip Content.")
                    return
                }

                var lookup = util.createLookup(artboards)
                each(selections, function(selection) {
                    if (selection.pointsRotatable) {
                        selection.flipHorizontally()
                        var artboard = selection.matchingArtboard(lookup)
                        if (artboard) {
                            flattener.perspectiveTransform(artboard, selection)
                        }
                    } else {
                        util.debug("selection: " + selection.name + " not rotatable")
                    }
                })
                ui.show("Magic Mirror: Flip Content is applied to " + count(selections) + " layer(s).")
            }

            run(context.artboards(), context.selections(), ui, util, createFlattener())
        },

        rotatePoints : function(context) {
            var context = this.context
            var run = function(artboards, selections, ui, util, flattener) {
                log("MagicMirror.rotatePoints()")

                if (util.empty(selections)) {
                    ui.show("Magic Mirror: Select one or more layers to perform Rotate Content.")
                    return
                }

                var lookup = util.createLookup(artboards)
                each (selections, function(selection) {
                    if (selection.pointsRotatable) {
                        selection.rotatePoints()
                        var artboard = selection.matchingArtboard(lookup)
                        if (artboard) {
                            flattener.perspectiveTransform(artboard, selection)
                        }
                    } else {
                        util.debug("selection: " + selection.name + " not rotatable")
                    }
                })
                ui.show("Magic Mirror: Rotate Content is applied to " + count(selections) + " layer(s).")
            }

            run(context.artboards(), context.selections(), ui, util, createFlattener())
        },

        highlightMirrors: function(context) {
            var context = this.context
            var run = function(artboards, layers, util, flattener) {
                log("MagicMirror.highlightMirrors()")
                var lookup = util.createLookup(artboards)
                each(layers, function(layer) {
                    var parent = layer.artboard
                    var artboard = layer.matchingArtboard(lookup)
                    if (artboard) {
                        layer.fillColor("#FFFFFF")
                    }
                })
            }
            run(context.artboards(), context.layers(), util, createFlattener())
        },

        activate: function() {
            var run = function(validator) {
                log("MagicMirror.activate")
                validator.promptActivation()
            }
            run(validator)
        },

        getTemplates: function(context) {
            var run = function(ui) {
                log("MagicMirror.getTemplates")

                var license_key = persister.licensedTo ? persister.licensedTo.transaction_id : ""
                var params = { "l" : license_key }
                ui.open("http://magicmirror.design/templates/", params)
            }
            run(ui)
        }

    }

    var validator = MagicMirror.validator(ui, persister)
    var locker = MagicMirror.locker(actioner, validator, persister, ui)

    var createFlattener = function() {
        return MagicMirror.flattener(locker)
    }

    return {
        "needsRevalidate" : validator.needsRevalidate,
        "validate": validator.validate,
        "licensedTo" : persister.licensedTo,
        "actionsCount": locker.actionsCount,
        "jumpToArtboard": locker.jumpToArtboard,
        "mirrorPage": locker.mirrorPage,
        "rotatePoints": locker.rotatePoints,
        "flipHorizontally": locker.flipHorizontally,
        "highlightMirrors": locker.highlightMirrors,
        "activate": actioner.activate,
        "selections": ctx.selections,
        "getTemplates": actioner.getTemplates,
    }
}

MagicMirror.context = function(context) {

    var pri = (function(context){
        var doc = context.document;           // the current document (MSDocument)
        var page = [doc currentPage];         // the current page (MSPage)
        var artboards = [page artboards];     // all artboards

        var allArtboards = []
        var pages = [[doc pages] valueForKeyPath:"artboards"]
        each(pages, function(page) {
            each(page, function(artboard) {
                allArtboards.push(artboard)
            })
        })
        var view = [doc currentView];
        var selections = context.selection

        return {
            doc: doc,
            page : page,
            artboards : allArtboards,
            view : view,
            selections : selections,
        }
    }(context));

    var view = MagicMirror.view(pri.view)
    var artboards = function() {
        return map(pri.artboards, function(artboard) {
            return MagicMirror.artboard(artboard)
        })
    }
    var selections = function() {
        var selections = map(pri.selections, function(item) {
            return MagicMirror.layer(item)
        })
        return selections 
    }
    var layers = function() {
        return map([page children], function(layer) {
            return MagicMirror.layer(layer)
        })
    }
    var page = pri.page

    var context = {}
    context.page = page
    context.view = view
    context.artboards = artboards
    context.selections = selections
    context.layers = layers
    return context
}

MagicMirror.artboard = function(msartboard) {
    if (!msartboard) {
        return {}
    }
    return {
        name: msartboard.name(),
        rect: [msartboard rect],
        layer : msartboard,
        page : msartboard.parentPage(),
        pageName : msartboard.parentPage().name()
    }
}

MagicMirror.layer = function(mslayer) {
    if (mslayer.className && mslayer.className().toString() == "MSShapeGroup") {
        var artboard = MagicMirror.artboard(mslayer.parentArtboard())
        var layerName = mslayer.name()
        var identifier = LayerHelper.getIdentifier(mslayer)
        return {
            artboard: artboard,
            name: layerName,
            identifier: identifier,
            matchingArtboard:function(lookup) {
                var ab = lookup[this.identifier]
                if (ab && artboard.name != ab.name) {
                    return ab
                }
                return null
            },
            tokens: function() {
                return LayerHelper.getTokens(this.layer)
            },
            pointsRotatable: true,
            rotatePoints:function() {
                var bezierPath = LayerHelper.getBezierPath(mslayer)
                var rotated = BezierPathHelper.rotatePoints(bezierPath)
                mslayer.setBezierPath(rotated)
                log("rotate: " + this.name)
            },
            flipHorizontally:function() {
                var bezierPath = LayerHelper.getBezierPath(mslayer)
                var flipped = BezierPathHelper.flipShiftX(bezierPath)
                mslayer.setBezierPath(flipped)
                mslayer.isFlippedHorizontal = !mslayer.isFlippedHorizontal()
            },
            fillColor: function(hex) {
                LayerHelper.fillColor(mslayer, hex)
            },
            rect:[mslayer rect],
            layer : mslayer,
        }
    } else {
        //var artboard = MagicMirror.artboard(mslayer.parentArtboard())
        return {
            matchingArtboard: function(lookup) {
                return null
            },
            name: mslayer.name(),
            pointsRotatable: false
        }
    }
}

MagicMirror.flattener = function(locker) {
    return {
        flattener : MSLayerFlattener.alloc().init(),
        perspectiveTransform : function(from, to) {
            var layer = to.layer
            var image = LayerHelper.getImage(from.layer, this.flattener)
            var bezierPath = LayerHelper.getBezierPathInBounds(layer)
            var quad = BezierPathHelper.getQuad(bezierPath)
            var size = quad.size
            var scale = 1
            var tokens = to.tokens()
            if (locker.isLicensed() && (!contains(tokens, ".1x") || contains(tokens, ".2x"))) {
                scale = 2
                quad = quad.scale(2, 2)
            } 
            var transformed = ImageHelper.perspectiveTransform(image, quad.tl, quad.tr, quad.bl, quad.br, quad.size)
            LayerHelper.fillBottom(layer, transformed)
            log("perspectiveTransforming: from " + from.name + ", to: " + to.name + ", scale: " + scale + ", size:" + transformed.size())
        }
    }
}

MagicMirror.view = function(view) {
    return {
        view: view,
        setPage: function(page) {
            this.view.setCurrentPage(page)
        },
        zoomToArtboard:function(artboard) {
            log("jump to artboard for layer: " + artboard.name + ", frame: " + artboard.frame + ", view:" + this.view)
            this.setPage(artboard.page)
            this.view.zoomToFitRect(NSInsetRect(artboard.rect, -50, -50));
        }
    }
}


MagicMirror.persister = function() {
    var defaults = NSUserDefaults.standardUserDefaults()
    var allKeys = {
        "actionsCount":"design.magicmirror.actionscount",
        "lastValidation":"design.magicmirror.lastvalidation",
        "licensedTo":"design.magicmirror.licensedto",
    }
    var actionsCount = 0
    var lastValidation = null
    var licensedTo = {}
    reload()

    function save() {
        defaults.synchronize()
    }

    function reset() {
        log("reset")
        for (key in allKeys) {
            defaults.removeObjectForKey(allKeys[key])
        }
        save()
        reload()
    }

    function reload() {
        actionsCount = defaults.integerForKey(allKeys["actionsCount"])
        lastValidation = defaults.objectForKey(allKeys["lastValidation"])
        licensedTo = defaults.objectForKey(allKeys["licensedTo"])
    }

    return {
        "reset":function() {
            reset()
            this.actionsCount = actionsCount
            this.lastValidation = lastValidation
            this.licensedTo = licensedTo
        },
        "actionsCount":actionsCount,
        "setActionsCount":function(count) {
            defaults.setInteger_forKey_(count, allKeys["actionsCount"])
            save()
        },
        "lastValidation":lastValidation,
        "setLastValidation":function(date) {
            defaults.setObject_forKey_(date, allKeys["lastValidation"])
            save()
        },
        "licensedTo":licensedTo,
        "setLicensedTo":function(licensedTo) {
            if (!licensedTo) {
                defaults.removeObjectForKey(allKeys["licensedTo"])
            } else {
                defaults.setObject_forKey_(licensedTo, allKeys["licensedTo"])
            }
            save()
        }
    }
}

MagicMirror.validator = function(ui, persister) {

    function get(urlString) {
        var theUrl = [NSURL URLWithString:urlString]
        
        // define the request
        var theRequest = NSMutableURLRequest.requestWithURL_cachePolicy_timeoutInterval(theUrl, NSURLRequestReloadIgnoringLocalCacheData, 60);
        theRequest.setHTTPMethod_("GET");
        
        // get response data
        var theResponse = null, error = null, theResponseData = [NSURLConnection sendSynchronousRequest:theRequest returningResponse:theResponse error:error];
        
        return {
            "url":theUrl,
            "response": theResponse,
            "data":theResponseData,
            "error":error,
            "json":function() {
                if (this.data) {
                    var theText = [[NSString alloc] initWithData:this.data encoding:NSUTF8StringEncoding];
                    var parsed = JSON.parse(theText);
                    return parsed
                }
                return {}
            },
        }
    }

    function promptLicenseInfo(info) {
       var desc = "\"Magic Mirror - Licensed\" is now available for commercial use with pro features unlocked."
       + "\n\nRegistered to: " + info.first_name + " " + info.last_name
       + "\nEmail: " + info.email
       + "\nLicense: " + info.transaction_id
       + "\n\nThanks for purchasing Magic Mirror! :)"

        var modal = ui.alert("Magic Mirror - Licensed", desc, "OK", "Cancel", "Deregister...")
        if (modal == NSAlertDefaultReturn ) {
            
        } else if (modal == NSAlertAlternateReturn) {
        } else {
            persister.setLicensedTo(null)
        }
    }

    function promptToValidate() {

        var defaultValue = ""
        var placeholderValue = "e.g. 59J79294TW1881135"
        var title = "Magic Mirror - Free" 
        var message = "\"Magic Mirror - Free\" is free for personal use, advanced features and a more permissive commercial license can be obtained through purchasing.\n\nEnter your Paypal Transaction ID to activate your license, please click the \"Purchase…\" button to visit the website for more info."
        var defaultButton = "Enter"
        var alternateButton = "Purchase…"
        var otherButton = "Later"
        var statusValue = ""

        var defaultAction = function(value) {
           log("Enter Tapped")
            if (value && value.length()) {
                var response = validate(value)
                var info = response.json()
                if (info && info["success"] == 1) {
                   persister.setLicensedTo(info)
                   log("License Validated! info:")
                   log(info)
                   promptLicenseInfo(info)
                   return
                } else {
                    statusValue = "incorrect"
                    log("License failed to validate: " + info)
                }
            } else {
                statusValue = "please input"
                log("no value")
            }

            ui.inputAlert(title, message, defaultValue, placeholderValue, statusValue, defaultButton, alternateButton, otherButton, defaultAction, alternateAction, otherAction)
        }
        var otherAction = function(value) {
            log("Later Tapped")
        }
        var alternateAction = function(value) {
            log("Purchase… Tapped")
            statusValue = ""
            ui.open("http://magicmirror.design/purchase/")
            ui.inputAlert(title, message, value, placeholderValue, statusValue, defaultButton, alternateButton, otherButton, defaultAction, alternateAction, otherAction)
        }

        ui.inputAlert(title, message, defaultValue, placeholderValue, statusValue, defaultButton, alternateButton, otherButton, defaultAction, alternateAction, otherAction)

        return false
    }

    function now() {
        var now = NSDate.alloc().init()
        return now
    }

    function validate(license)
    {
        var url = "http://api.magicmirror.design/verify/" + license + ".json"
        var response = get(url)
        return response
    }

    function lastValidation() {
        var date = persister.lastValidation
        return date
    }

    function setLastValidation(date) {
        persister.setLastValidation(date)
    }

    function sinceLastValidation() {    
        var past = lastValidation() || NSDate.distantPast()
        var seconds = now().timeIntervalSinceDate(past)
        return seconds
    }

    function needsRevalidate() {
        var day = 24 * 60 * 60 // one day
        return sinceLastValidation() >= day
    }

    return {
        needsRevalidate: needsRevalidate,
        promptActivation: function() {
            if (!persister.licensedTo) {
                promptToValidate()
            } else {
                promptLicenseInfo(persister.licensedTo)
            }
        },
        manualActivation: function(license, persister) {
            log(license)
            if (license && license.length) {
                var response = validate(license)
                var info = response.json()
                if (info && info["success"] == 1) {
                   persister.setLicensedTo(info)
                    log("activated!")
                } else {
                    log("incorrect license")
                }
            } else {
                log("missing license")
            }
        },
        validate: function() {
            var success = promptToValidate()
            setLastValidation(now())
            return {
                "success":success,
            }
        },
    }
};

MagicMirror.locker = function(actioner, validator, persister, ui) {
    var actionsCount = persister.actionsCount || 0
    var licensedTo = persister.licensedTo;

    function needsPromptDonation() {
        return (actionsCount % 10 == 0)
    }

    function increaseActionsCount() {
        actionsCount++
        persister.setActionsCount(actionsCount)
    }

    function afterAction() {
        increaseActionsCount()
        log("actionsCount: " + actionsCount + " needs: " + needsPromptDonation() + " licensed: " + licensedTo)
        if (needsPromptDonation() && !licensedTo) {
            log("prompt")
            validator.promptActivation()
        }
    }

    return {
        actionsCount:actionsCount,
        licensedTo:licensedTo,
        isLicensed: function() {
            return licensedTo != nil
        },
        mirrorPage:function() {
            actioner.mirrorPage()
            afterAction()
        },
        jumpToArtboard:function() {
            actioner.jumpToArtboard()
            afterAction()
        },
        rotatePoints:function() {
            actioner.rotatePoints()
            afterAction()
        },
        flipHorizontally:function() {
            if (!licensedTo) {
                log("no license")
                validator.promptActivation()
            } else {
                actioner.flipHorizontally()
            }
        },
        highlightMirrors:function() {
            actioner.highlightMirrors()
            afterAction()
        }
    }
}

MagicMirror.resource = function(context) {
    
    var plugin = context.plugin
    var imageFromURL = function(url) {
        var image = [[NSImage alloc] initWithContentsOfURL:url];
        return image;
    }
    var urlForResourceNamed = function(name) {
        var url = [plugin urlForResourceNamed:name]
        return url
    }

    return {
        image: function(name) {
            log("name: " + name)
            var url = urlForResourceNamed(name)
            log("url: " + url)
            if (url) {
                return imageFromURL(url)
            }
            return null
        }
    }
}

MagicMirror.util = {
    empty : function(array) {
        return (array == nil || array.length == 0)
    },
    createLookup : function(identifiables) {
        var lookup = {}
        each(identifiables, function(item) {
            lookup[item.name] = item
        })
        return lookup
    },
    debug : function(text) {
        log(text)
    }
}

MagicMirror.ui = function(context) {

    var resource = MagicMirror.resource(context)
    return {
        alert: function(title, message, defaultButton, alternateButton, otherButton) {
            var alert = [NSAlert alertWithMessageText: title
                                             defaultButton:defaultButton
                                           alternateButton:alternateButton
                                               otherButton:otherButton
                                 informativeTextWithFormat:message];

            return [alert runModal];
        },
        dialog : function(title, message) {
            var app = [NSApplication sharedApplication];
            var dialog = [app displayDialog:message withTitle:title];
            return dialog
        },
        input: function(question, initialValue) {
            var doc = context.document
            return [doc askForUserInput:question initialValue:initialValue];
        },
        inputAlert : function(title, message, defaultValue, placeholderValue, statusValue, defaultButton, alternateButton, otherButton, defaultAction, alternateAction, otherAction) {
            log("alert:")
            var alert = [NSAlert alertWithMessageText: title
                                             defaultButton:defaultButton
                                           alternateButton:alternateButton
                                               otherButton:otherButton
                                 informativeTextWithFormat:message];
            var icon = resource.image("icon.png")
            [alert setIcon:icon]

            var input = [[NSTextField alloc] initWithFrame:NSMakeRect(0, 0, 200, 24)];
            [input setStringValue:defaultValue];
            [[input cell] setPlaceholderString:placeholderValue]
            var statusLabel = [[NSTextField alloc] initWithFrame:NSMakeRect(210, 3, 100, 18)];
            [statusLabel setStringValue:statusValue];
            [statusLabel setBordered:false];
            [statusLabel setBackgroundColor:[NSColor clearColor]];
            var container = [[NSView alloc] initWithFrame:NSMakeRect(0, 0, 310, 24)];
            [container addSubview:input];
            [container addSubview:statusLabel];
            [alert setAccessoryView:container];

            var modal = [alert runModal];
            [input validateEditing];
            var inputText = [input stringValue];

            if (modal == NSAlertDefaultReturn ) {
                defaultAction(inputText)
            } else if (modal == NSAlertAlternateReturn) {
                alternateAction(inputText)
            } else {
                otherAction(inputText)
            }
        },
        open: function(url, params) {
            var get_params = merge(params || {}, {
                "utm_source":"plugin",
                "utm_medium":"plugin",
                "utm_campaign":"1.2.3"
            })
            var query = join(get_params, "=", "&")
            [[NSWorkspace sharedWorkspace] openURL:[NSURL URLWithString:url + "?" + query]];
        },
        show: function(message) {
            var doc = context.document
            doc.showMessage(message)
        },
    }
}